	bool Remove(const K& key)
	{
		
		Node *prev = NULL;
		Node *cur = root;
		Node *del = NULL;
		spec{prev:NULL, curr:rcuItr(root,1) empty N}
		while (cur&&cur->_key!=key)
		{
	spec{curr:rcuItr(root,epsilon>=1) {...} N, prev:rcuItr(root,epsilon>=1){...} N[(left|right,epsilon>=1)->curr]}
			if (cur->_key < key)
			{
				prev = cur;
			spec{curr:rcuItr(root,epsilon){...} N, prev:rcuItr(root,epsilon){...} N}
				cur = prev->right;
			spec{curr:rcuItr(root,epsilon+1){...right} N, prev:rcuItr(root,epsilon){...} N[(right,epsilon>=1)->curr,(left,0)->curr]}
			}
			else if (cur->key>key)
			{
			spec{prev:_, curr:rcuItr(root,epsilon){...} N}
				prev = cur;
			spec{curr:rcuItr(root,epsilon){...} N, prev:rcuItr(root,epsilon){...} N}
				cur = prev->left;
			spec{curr:rcuItr(root,epsilon+1){...left} N, prev:rcuItr(root,epsilon){...} N[(left,epsilon>=1)->curr,(left,0)->curr]}
			}
			else
			{
				break;
			}

	spec{curr:rcuItr(root,epsilon>=1+1){...left|right} N, prev:rcuItr(root,epsilon){...} N[(right|left,epsilon>=1)->curr]}		
		}

	spec{curr:rcuItr(root,Epsilon) left {...} N, prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr] }

		if (cur == NULL)
		{
			return false;   
		}
		if (cur->left == NULL)
		{

			del = cur;
	spec{curr:rcuItr(root,Epsilon) {...} N,del:rcuItr(root,Epsilon) {...} N}
			if (prev == NULL)
			{
				root = cur->right;
			}
			else
			{

				Node* cr = curr->right;
			spec{cr:rcuItr(root,Epsilon+1) {...} right N} 
				if (prev->left == cur)
				{
			
		spec{curr:rcuItr(root,Epsilon) {...} N[(right,Epsilon)->cr]}
		spec{prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr] }
					prev->_left = cr;
		spec{curr:unlinked, prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr, (left,Epsilon)->cr] }
				
				}
				else
				{
		
		spec{curr:rcuItr(root,Epsilon) {...} N[(right,Epsilon)->cr]}
		spec{prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr] }
					prev->right = cr;
		spec{curr:unlinked, prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr, (right,Epsilon)->cr] }
				}
			}
		}
		else if (cur->right==NULL)
		{
			del = cur;
		spec{curr:rcuItr(root,Epsilon) left {...} N,del:rcuItr(root,Epsilon) {...} N}
			if (prev == NULL)
			{
				cur = cur->left;
			spec{curr:rcuItr(root,Epsilon+1) {...} left N,del:rcuItr(root,Epsilon) {...} N}
			}
			else
			{
				Node* cr = curr->right;
				Node* cl = curr->left;
			spec{cr:rcuItr(root,Epsilon+1) {...} right N, cl:rcuItr(root,Epsilon+1) {...} left N} 
				if (prev->left == cur)
				{

			spec{curr:rcuItr(root,Epsilon) {...} N[(right,Epsilon)->cr,(left,Epsilon)->cl]}
			spec{prev:rcuItr(root,Epsilon) {...} N[(right|left,epsilon)->curr] }
					parent->left = cl;
			spec{curr:unlinked, prev:rcuItr(root,Epsilon) {...} N[(right|left,epsilon)->curr, (left,Epsilon)->cl] }

				}
				else
				{
			spec{curr:rcuItr(root,Epsilon) {...} N[(right,Epsilon)->cr,(left,Epsilon)->cl]}
			spec{prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr] }
					prev->right = cr;
			spec{curr:unlinked, prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr, (right,Epsilon)->cr] }

				}
			}

		}
		else
		{
		spec{curr:rcuItr(root,Epsilon) {...} N, prev:rcuItr(root,Epsilon){...} N[(right|left,epsilon)->curr] }
			Node *minright = cur->_right;
		spec{curr:rcuItr(root,Epsilon) {...} N[(right,Epsilon)->minright]}
		spec{prev:rcuItr(root,Epsilon) {...} N[(right|left,epsilon)->curr]}
		spec{minright:rcuItr(root,Epsilon+1) {...} right N }
			while (minright->_left)
			{
		spec{prev:rcuItr(root,epsilonl1) {...} {right...} N[(right|left,epsilon)->curr,(left,epsilonl1)->minright ]}
		spec{minright:rcuItr(root,epsilonl1) {...} right {...} N}
				prev = minright;
				minright = prev->left;
		spec{prev:rcuItr(root,epsilonl1) {right...} N[(right|left,epsilon)->curr,(left,epsilonl1)->minright ]}
		spec{minright:rcuItr(root,epsilonl1+1) {...} right {...left} N}

			}
		spec{prev:rcuItr(root,Epsilon+Epsilon1) {...} {right...} N[(right|left,epsilon)->curr,(left,epsilonl1)->minright]}
		spec{minright:rcuItr(root,Epsilon+Epsilon1+1) {...} right {...} N}		
		
		Node* minrightr = minright->right;
		spec{minright:rcuItr(root,Epsilon+Epsilon1+1) {...} right {...} N[(right,Epsilon+Epsilon1)->minrightr]}
		spec{minrightr:rcuItr(root,Epsilon+Epsilon1+2) {...} right {...} right N}

			if (prev->left = minright){
				prev->_left = minrightr;
		spec{prev:rcuItr(root,Epsilon+Epsilon1) {...} {right...} N[(right|left,epsilon)->curr,(left,Epsilon+Epsilon1)->minrightr]}
		spec{minrightr:rcuItr(root,Epsilon+Epsilon1+2) {...} right {...} left N}
			}
			else{

				curr->right = minrightr; //prev->right = minrightr
		spec{curr:rcuItr(root,Epsilon) {...} N[(right,Epsilon)->minrightr]}
		spec{minrightr:rcuItr(root,Epsilon+1) {...} right N}

			}
			asyncDelayedFree(minright);
		}
		return true;
	}
